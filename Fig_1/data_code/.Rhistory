library(phangorn)
library(tanggle)
library(dplyr)
## a quick function to draw the split network
draw.split.network <- function(Nnet) {
#Nnet$edge.length <- Nnet$edge.length*aln.length
pn <- ggsplitnet(Nnet)
tips <- pn$data[pn$data$isTip, ]
tips$id <- sapply(tips$label, function(x) strsplit(x, split = "\\|")[[1]][4])
tips$species <- sapply(tips$label, function(x) strsplit(x, split = "\\|")[[1]][2])
coord.info$latlon <- paste0(coord.info$lat, "_", coord.info$lon)
tips$place <- sapply(tips$id, function(x) coord.info[which(coord.info$sampleid == x), "latlon"][1])
tips$BIN <- sapply(tips$id, function(x) coord.info[which(coord.info$sampleid == x), "bin_uri"][1])
tips %>% count(x, y, place, BIN, species) -> tips.occur
#  tips.occur <- tips.occur[(!(tips.occur$place %in% c("NA_NA", ""))), ]
tips.occur <- tips.occur[complete.cases(tips.occur$BIN), ]
unique(tips.occur$BIN)
p <-
ggsplitnet(Nnet) +
geom_point(data = tips.occur, aes(x=x, y=y, fill = BIN, shape = species),
size=3, alpha=1, color = "lightgrey") +
coord_fixed() +
geom_treescale(offset = 0, width = 0.01)  + #x = 0, y=0
#scale_color_brewer(palette = "greys")
scale_fill_manual(values = c("BOLD:ADC7414"="#F0E442",
"BOLD:AEB1648" = "#ea568c",
"BOLD:AAY3465" = "#D81B60",
"BOLD:AEB1649" = "#4477AA",
"BOLD:ABW2101" = "purple",
"BOLD:AAJ0287" = "#15A3C7",
"BOLD:ACB4278" = "#134e13",
"BOLD:ACE5392" = "#186218",
"BOLD:ACF1897" = "#1d771d",
"BOLD:ACB5508" = "#228b22",
"BOLD:ACE2909" = "#279f27",
"BOLD:AAY1020" = "#2cb42c",
"BOLD:ACB4275" = "#31c831",
"BOLD:ACE5105" = "#4CBB17"), name = "BIN",
guide = guide_legend(override.aes = list(shape=21,
alpha = 1))) +
scale_shape_manual(values = c("Gmelinoides_fasciatus" = 24,
"Eulimnogammarus_verrucosus" = 22,
"Eulimnogammarus_cyaneus" = 23))
theme(legend.position = 'bottom')
print(p)
return(p)
}
## read the data = nexus file recorded with SplitsTree4 (!)
Nnet.eve <- read.nexus.networx("6_BOLD_COI_Eve_aln_trimmed_cl2.fa.nex")
Nnet.ecy <- read.nexus.networx("6_BOLD_COI_Ecy_aln_trimmed_cl2.fa.nex")
Nnet.gfa <- read.nexus.networx("6_BOLD_COI_Gfa_aln_trimmed_cl2.fa.nex")
draw.split.network(Nnet.gfa)
#aln.length = 510
coord.info <- read.delim("1_bold_data_3sp.tsv.csv")
draw.split.network(Nnet.gfa)
library(rnaturalearth)
library(rnaturalearthdata)
russia <- ne_download(scale = 'large', returnclass = "sf", type='lakes', category='physical')
russia <- ne_download(scale = 'large', returnclass = "sf", type='lakes', category='physical')
russia2 <- ne_download(scale = 'large', returnclass = "sf", type='rivers_lake_centerlines', category='physical')
russia <- ne_download(scale = 'large', returnclass = "sf", type='lakes', category='physical')
russia2 <- ne_download(scale = 'large', returnclass = "sf", type='rivers_lake_centerlines', category='physical')
russia2 <- ne_download(scale = 'large', returnclass = "sf", type='rivers_lake_centerlines', category='physical')
russia <- ne_download(scale = 'large', returnclass = "sf", type='lakes', category='physical')
russia <- ne_download(scale = 'large', returnclass = "sf", type='lakes', category='physical')
russia <- ne_download(scale = 'large', returnclass = "sf", type='lakes', category='physical')
russia <- ne_download(scale = 'large', returnclass = "sf", type='lakes', category='physical')
russia <- ne_download(scale = 'large', returnclass = "sf", type='lakes', category='physical')
russia <- ne_download(scale = 'large', returnclass = "sf", type='lakes', category='physical')
